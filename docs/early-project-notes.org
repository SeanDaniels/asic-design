#+TITLE: Early Project Notes
* Task(s)
- Highes level description: produce hardware that can execute matrix multiplication
- Implement a bitfusion style architecture that can handle multiple levels of precision in a neural network
- Change arithmetic hardware to match the precision needed in the neural stage
- Hardware can perform a smaller number of larger multiply-adds per cycle *or* a larger number with smaller words
- This can save power and area versus the alternative of sizing the arithmetic units for the largest word sizes
- Test fixture provides three memories:
  - weight
  - inputs
  - results
- Simplest solution is to implement one or more multiply accumuulate units that support the widest bit width and simply sign extend the narrower inputs
* Control Interface
- There will be three control signals for the unit:
  - input reset_b: active low reset signal -> will clear the machine state
  - input clk: system clock forwarded from the test fixture
  - input run: test bench will set run signal high after all data has been loaded
* Memory Structure
- Three SRAMS, all of which are 16-bits wide and word addressable:
  - weight
  - input
  - output
- These memories are packed 16 bit memories -> there will be multiple wieghts or inputs in a 16 bit word if the input or weight 8-bits wide or less:
  - 2 for 8-bit inputs
  - 4 for 4-bit inputs
  - 8 for 2-bit inputs
- Outputs:
  - All results are 16-bit words -> use sign extension
* SRAM Interface
- SRAM is byte addressable, one cycle delay between address and data
- When writing to sram, set write_enable to high read_write_select to high
* Execution Module
- Implement multiply, accumulate MAC
- output of data path 1 and data path 2 are bit strings
- let data path 1 output be dp1, controller = control1:
  
  | input1 | input2 |
  | input3 | input4 |

  + 2x2 matrix
  + dp1 ws = 16>>ws = number of columns
  + number of rows can be determined from control1

- let data path 2 output be dp2, controller = control2:

  | weight1 |
  | weight2 |

  + 2x1 matrix

- output of this matrix multiplication is 2x1 matrix
  | input1*weight1 + input2*weight2 |
  | input3*weight1 + input4*weight2 |

  
- num columns can be retrieved from control 1
* Relevant Read Information
- Number of columns in a given matrix is determined by the number of instructions per read
- Number of rows in a given matrix is determined by the number of reads to get all instructions
- Data value 'Word Size' is used to determine how many arguments are passed per read
- Number of rows/ number of reads can be determined with:
  if Word Size = 16, num_reads = instructions
  if Word Size = 8, num_reads = instructions>>1
  if Word Size = 4, num_reads = instructions>>2
  if Word Size = 2, num_reads = instructions>>3
** Input
- 12 instructions, 4-bit word size:
  - 4 instructions per read (number of columns in array) - word size will need to be used for multiplication
  - 3 reads to get all instructions (number of rows in array) - 
- If word size = 16, end address = address + instructions
- If word size = 8, end address = address + instructions/2 (instructions >> 1)
- If word size = 4, end address = address + instructions/4 (instructions >> 2)
- If word size = 2, end address = address + instructions/8 (instructions >> 3)
- instructions = 24 = 011000, word size = 8, end address = address + 011000 >> 1? 
  + 011000 >> 1 = 001100 = 12
- instructions = 24 = 011000, word size = 4, end address = address + 011000 >> 2?
  - 011000 >> 2 = 000110 =  6
| i_1 | i_2 | i_3 | i_4 | *row read* | i_5 | i_6 | i_7 | i_8 | *row read* | i_9 | i_10 | i_11 | i_12 | *done* |

* Project Flow
