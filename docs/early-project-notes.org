#+TITLE: Early Project Notes
* Task(s)
- Highes level description: produce hardware that can execute matrix multiplication
- Implement a bitfusion style architecture that can handle multiple levels of precision in a neural network
- Change arithmetic hardware to match the precision needed in the neural stage
- Hardware can perform a smaller number of larger multiply-adds per cycle *or* a larger number with smaller words
- This can save power and area versus the alternative of sizing the arithmetic units for the largest word sizes
- Test fixture provides three memories:
  - weight
  - inputs
  - results
- Simplest solution is to implement one or more multiply accumuulate units that support the widest bit width and simply sign extend the narrower inputs
* Control Interface
- There will be three control signals for the unit:
  - input reset_b: active low reset signal -> will clear the machine state
  - input clk: system clock forwarded from the test fixture
  - input run: test bench will set run signal high after all data has been loaded
* Memory Structure
- Three SRAMS, all of which are 16-bits wide and word addressable:
  - weight
  - input
  - output
- These memories are packed 16 bit memories -> there will be multiple wieghts or inputs in a 16 bit word if the input or weight 8-bits wide or less:
  - 2 for 8-bit inputs
  - 4 for 4-bit inputs
  - 8 for 2-bit inputs
- Outputs:
  - All results are 16-bit words -> use sign extension
* SRAM Interface
- SRAM is byte addressable, one cycle delay between address and data
- When writing to sram, set write_enable to high read_write_select to high
* Execution Module
- Implement multiply, accumulate MAC
- output of data path 1 and data path 2 are bit strings
- let data path 1 output be dp1, controller = control1:
  
  | input1 | input2 |
  | input3 | input4 |

  + 2x2 matrix
  + dp1 ws = 16>>ws = number of columns
  + number of rows can be determined from control1

- let data path 2 output be dp2, controller = control2:

  | weight1 |
  | weight2 |

  + 2x1 matrix

- output of this matrix multiplication is 2x1 matrix
  | input1*weight1 + input2*weight2 |
  | input3*weight1 + input4*weight2 |

  
- num columns can be retrieved from control 1
* Relevant Read Information
- Number of columns in a given matrix is determined by the number of instructions per read
- Number of rows in a given matrix is determined by the number of reads to get all instructions
- Data value 'Word Size' is used to determine how many arguments are passed per read
- Number of rows/ number of reads can be determined with:
  if Word Size = 16, num_reads = instructions
  if Word Size = 8, num_reads = instructions>>1
  if Word Size = 4, num_reads = instructions>>2
  if Word Size = 2, num_reads = instructions>>3
** Input
- 12 instructions, 4-bit word size:
  - 4 instructions per read (number of columns in array) - word size will need to be used for multiplication
  - 3 reads to get all instructions (number of rows in array) - 
- If word size = 16, end address = address + instructions
- If word size = 8, end address = address + instructions/2 (instructions >> 1)
- If word size = 4, end address = address + instructions/4 (instructions >> 2)
- If word size = 2, end address = address + instructions/8 (instructions >> 3)
- instructions = 24 = 011000, word size = 8, end address = address + 011000 >> 1? 
  + 011000 >> 1 = 001100 = 12
- instructions = 24 = 011000, word size = 4, end address = address + 011000 >> 2?
  - 011000 >> 2 = 000110 =  6
| i_1 | i_2 | i_3 | i_4 | *row read* | i_5 | i_6 | i_7 | i_8 | *row read* | i_9 | i_10 | i_11 | i_12 | *done* |

* Project Flow
* Synchronization
- After data is read from sram:
  - At each clock edge, read count is incremented, which isn't accurate
* Matrix
** Weights (2 rows, 8 columns)
- number of inputs: 16
- size of inputs: 2-bits
- Inputs per read: 16 >> 1
- Reads needed: 16 >> 3
- Weight Matrix
  | row | cols       |            |            |            |            |              |              |              |
  |-----+------------+------------+------------+------------+------------+--------------+--------------+--------------|
  |   1 | input[0:1] | input[2:3] | input[4:5] | input[6:7] | input[8:9] | input[10:11] | input[12:13] | input[14:15] |
  |   2 | input[0:1] | input[2:3] | input[4:5] | input[6:7] | input[8:9] | input[10:11] | input[12:13] | input[14:15] |
- Input Matrix
  | 1 | input[0:] |
  | 2 |           |
  | 3 |           |
  | 4 |           |
  | 5 |           |
  | 6 |           |
  | 7 |           |
  | 8 |           |
** Inputs (8 rows, 1 column)
- Number of inputs: 16
- Size of inputs: 8-bit
- Bits per row: 8
- Inputs per read: 2 (16 >> 3)
- Reads needed: 8 (16 >> 2)
- All rows read when bit iterator = bits per row, number row
So, the way the project works is, you have two different matrices: weights and inputs. The weights matrix will be n x n and the inputs matrix will be n x 1. This results in a n x 1 matrix after all the multiplication. So, let me get to your specific example now.

Assume you have 16 inputs consisting of 8-bit words
16 weights consisting of 2-bit words. This will mean two things.
First, your weights matrix will have eight words per line. So, each row in the weights matrix corresponds to two lines in the weights SRAM.
Thus, you will need to read 16*2 lines = 32 lines from the weights matrix for the first problem.
As for your inputs file, you will have only 16 words in total which corresponds to only two lines. And, you will go back to the beginning of your input address each time you finish multiplying one row.

The weights matrix / SRAM will be as follows (not including the word size and # of entries:
w = [ w7   w6  w5   w4   w3   w2   w1 w0
        w15 w14 w13 w12 w11 w10 w9 w8
        // first row completed
        w23   w22  w21   w20   w19 w18   w17 w16
        w31 w30 w29 w28 w27 w26 w25 w24
        //second row completed
        ... 14 more rows to complete
       ..... ];

The inputs matrix will be as follows:
i = [w1 w0
      w3 w2
      w5 w4
      w7 w6
      w9 w8
      w11 w10
      w13 w12
      w15 w14
      // first input data set completed
     ... next problem
    ];

So, there will be multiple words per line. If the word size is 2 bits, then there will be 8 words per line and if it's 4 bits, then you will have 4 words per line and finally if it's 8 bits, you will have only 2 words per line. Hence, it becomes crucial that you keep up with where you are in the multiplication process.

So, the multiplication will look like this: result of first problem =
first row result: (w0 * w0) + (w1 * w1) + ........ + ( w14 * w14) + (w15 * w15)
second row result: (w16 * w0) + (w17 * w1) + .......... + (w30 * w14) + (w31 * w15)
and so on

To summarize, your weights and inputs sram will have the number of entries in the first line. So, once you read that number in, we know that the weights and inputs matrix will be of the following sizes respectively: # of entries x # of entries AND # of entries x 1. So, for each row in the multiplication, you will use the same input data set. Once you are done with your problem, then that's when you change both the weights and inputs.

Hope this makes sense. Let me know if you need further clarification. TBH, deciphering the project specs is half the battle. The instructions are pretty confusing.
* weight_0
- row one
  |     |  1 |  2 |  3 |  4 |  5 |  6 |  7 |  8 |  9 | 10 | 11 | 12 | 13 | 14 | 15 | 16 |
  | bin | 00 | 01 | 00 | 01 | 01 | 00 | 01 | 00 | 01 | 01 | 01 | 00 | 01 | 00 | 00 | 01 |
  | dec |  0 |  1 |  0 |  1 |  1 |  0 |  1 |  0 |  1 |  1 |  1 |  0 |  1 |  0 |  0 |  1 |
- column
| entry | decimal |   |               |
|-------+---------+---+---------------|
|     1 |       2 | 0 |               |
|     2 |       7 | 1 |               |
|     3 |       0 | 0 |               |
|     4 |       3 | 1 |               |
|     5 |       9 | 1 |               |
|     6 |       0 | 0 |               |
|     7 |       4 | 1 |               |
|     8 |       7 | 0 | <- Stuck Here |
|     9 |       9 | 1 |               |
|    10 |       3 | 1 |               |
|    11 |       6 | 1 |               |
|    12 |       1 | 0 |               |
|    13 |       5 | 1 |               |
|    14 |       2 | 0 |               |
|    15 |       3 | 0 |               |
|    16 |     3?? | 1 |               |
* Current Problems
- The weight_coefficient bits aren't loading at the right time
- weight input from sram is updated by incrementing the number of weight reads
* SYNC_READ
- In this state for 4 clock cycles
